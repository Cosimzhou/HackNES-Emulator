#include "RecordScreen.h"

#include <fstream>

#include "../PeripheralDevices.h"

namespace hn {

const Byte kBmpFileHeader[] = {
    0x42, 0x4d, 0x36, 0xf1, 0x00, 0x00, 0x00, 0x00,  // BM, Flen
    0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0x28, 0x00,  //
    0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x10, 0xff,  //
    0xff, 0xff, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00,  //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,  //
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
    // Palette
    0x66, 0x66, 0x66, 0xff, 0x88, 0x2a, 0x00, 0xff,  //
    0xa7, 0x12, 0x14, 0xff, 0xa4, 0x00, 0x3b, 0xff,  //
    0x7e, 0x00, 0x5c, 0xff, 0x40, 0x00, 0x6e, 0xff,  //
    0x00, 0x06, 0x6c, 0xff, 0x00, 0x1d, 0x56, 0xff,  //
    0x00, 0x35, 0x33, 0xff, 0x00, 0x48, 0x0b, 0xff,  //
    0x00, 0x52, 0x00, 0xff, 0x08, 0x4f, 0x00, 0xff,  //
    0x4d, 0x40, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff,  //
    0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff,  //
    0xad, 0xad, 0xad, 0xff, 0xd9, 0x5f, 0x15, 0xff,  //
    0xff, 0x40, 0x42, 0xff, 0xfe, 0x27, 0x75, 0xff,  //
    0xcc, 0x1a, 0xa0, 0xff, 0x7b, 0x1e, 0xb7, 0xff,  //
    0x20, 0x31, 0xb5, 0xff, 0x00, 0x4e, 0x99, 0xff,  //
    0x00, 0x6d, 0x6b, 0xff, 0x00, 0x87, 0x38, 0xff,  //
    0x00, 0x93, 0x0c, 0xff, 0x32, 0x8f, 0x00, 0xff,  //
    0x8d, 0x7c, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff,  //
    0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff,  //
    0xff, 0xfe, 0xff, 0xff, 0xff, 0xb0, 0x64, 0xff,  //
    0xff, 0x90, 0x92, 0xff, 0xff, 0x76, 0xc6, 0xff,  //
    0xff, 0x6a, 0xf3, 0xff, 0xcc, 0x6e, 0xfe, 0xff,  //
    0x70, 0x81, 0xfe, 0xff, 0x22, 0x9e, 0xea, 0xff,  //
    0x00, 0xbe, 0xbc, 0xff, 0x00, 0xd8, 0x88, 0xff,  //
    0x30, 0xe4, 0x5c, 0xff, 0x82, 0xe0, 0x45, 0xff,  //
    0xde, 0xcd, 0x48, 0xff, 0x4f, 0x4f, 0x4f, 0xff,  //
    0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff,  //
    0xff, 0xfe, 0xff, 0xff, 0xff, 0xdf, 0xc0, 0xff,  //
    0xff, 0xd2, 0xd3, 0xff, 0xff, 0xc8, 0xe8, 0xff,  //
    0xff, 0xc2, 0xfb, 0xff, 0xea, 0xc4, 0xfe, 0xff,  //
    0xc5, 0xcc, 0xfe, 0xff, 0xa5, 0xd8, 0xf7, 0xff,  //
    0x94, 0xe5, 0xe4, 0xff, 0x96, 0xef, 0xcf, 0xff,  //
    0xab, 0xf4, 0xbd, 0xff, 0xcc, 0xf3, 0xb3, 0xff,  //
    0xf2, 0xeb, 0xb5, 0xff, 0xb8, 0xb8, 0xb8, 0xff,  //
    0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff   //
};

RecordScreen::RecordScreen() {}
RecordScreen::~RecordScreen() { Save(); }

void RecordScreen::create(unsigned int width, unsigned int height,
                          float pixel_size, Color color) {
  buffer_.resize(256 * 240);

  if (screen_) screen_->create(width, height, pixel_size, color);
}

void RecordScreen::setPixel(std::size_t x, std::size_t y, Color color) {
  buffer_[(y << 8) + x] = color;

  if (screen_) screen_->setPixel(x, y, color);
}

void RecordScreen::resize(float pixel_size) {
  if (screen_) screen_->resize(pixel_size);
}

void RecordScreen::setTip(const std::string &msg) {
  if (screen_) screen_->setTip(msg);
}

void RecordScreen::SetOutScreen(VirtualScreen *screen) {
  screen_.reset(screen);
}

VirtualScreen *RecordScreen::OutScreen() { return screen_.get(); }

void RecordScreen::Save() {
  std::ofstream file("/tmp/screen.bmp");
  file.write(reinterpret_cast<const char *>(&kBmpFileHeader[0]),
             sizeof(kBmpFileHeader));
  file.write(reinterpret_cast<const char *>(buffer_.data()), buffer_.size());
  file.close();
}

}  // namespace hn
